class Solution {
    public int[][] merge(int[][] intervals) {
        return Arrays.stream(intervals)
            .sorted((a, b) -> a[0] - b[0])
            .reduce(
                new LinkedList<int[]>(),
                (stk, curr) -> {
                    if (stk.isEmpty() || stk.getLast()[1] < curr[0]) {
                        stk.add(curr);
                    } else {
                        stk.getLast()[1] = Math.max(stk.getLast()[1], curr[1]);
                    }
                    return stk;
                },
                (stk1, stk2) -> stk1 // dummy combiner since no parallel stream
            )
            .toArray(int[][]::new);
    }
}


class Solution {
    public int[][] merge(int[][] in) {
        return Stream.of(
            Stream.of(Arrays.stream(in)
                .sorted((a, b) -> Integer.compare(a[0], b[0]))
                .toArray(int[][]::new))
                .map(a -> Arrays.asList(a[0], a[1]))
                .collect(Collectors.toList())
        ).map(list ->
            IntStream.range(1, list.size()).boxed().reduce(
                new ArrayList<List<Integer>>() {{
                    add(list.get(0));
                }},
                (stk, i) ->
                    (list.get(i).get(0) <= stk.get(stk.size() - 1).get(1))
                        ? ((stk.get(stk.size() - 1).set(1, Math.max(stk.get(stk.size() - 1).get(1), list.get(i).get(1)))) >= 0 ? stk : stk)
                        : (stk.add(list.get(i)) ? stk : stk),
                (x, y) -> x
            ).stream().map(l -> new int[]{l.get(0), l.get(1)}).toArray(int[][]::new)
        ).toArray(int[][][]::new)[0];
    }
}

