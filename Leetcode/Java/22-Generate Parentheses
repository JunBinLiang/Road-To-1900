class Solution {
    public List<String> generateParenthesis(int n) {
        return IntStream.range(0, (1 << (2 * n)))
            .mapToObj(st -> IntStream.range(0, 2 * n)
                .mapToObj(j -> (st & (1 << j)) > 0 ? "(" : ")")
                .collect(Collectors.joining()))
            .filter(s ->
                (IntStream.range(0, s.length()).boxed()
                    .reduce(0, (cnt, i) -> cnt += (s.charAt(i) == '(' ? 1 : -1), (x, y) -> x) == 0)
                &&
                Stream.iterate(new int[]{0, 0}, a -> a[0] < s.length(),
                        a -> new int[]{a[0] + 1, a[1] += (s.charAt(a[0]) == '(' ? 1 : -1)})
                    .allMatch(a -> a[1] >= 0)
            )
            .collect(Collectors.toList());
    }
}
