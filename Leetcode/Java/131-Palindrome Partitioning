
class Solution {
    public List<List<String>> partition(String s) {
        return IntStream.range(0, s.length())
            .boxed()
            .<List<List<String>>>reduce(
                Arrays.asList(new ArrayList<>()),
                (list, right) -> Stream.concat(
                    new ArrayList<>(list).stream(),
                    list.stream().map(singlelist -> {
                        List<String> copy = new ArrayList<>(singlelist); //can not mutate original list, otherwise may refer to the same list
                        copy.add(
                            s.substring(
                                singlelist.stream()
                                    .reduce(0, (sz, t) -> sz + t.length(), (a, b) -> a),
                                right + 1
                            )
                        );
                        return copy;
                    }).filter(l -> l.size() == 0 || (
                        l.get(l.size() - 1).length() > 0 &&
                        l.get(l.size() - 1).equals(new StringBuilder(l.get(l.size() - 1)).reverse().toString())
                    ))
                ).collect(Collectors.toList()),
                (x, y) -> x
            )
            .stream()
            .filter(singlelist ->
                singlelist.stream()
                    .reduce(0, (sz, t) -> sz + t.length(), (a, b) -> a) == s.length()
            )
            .collect(Collectors.toList());
    }
}

/*

1.
.boxed() converts an IntStream to a Stream<Integer>, but Stream<Integer> does not have .mapToObj(...) â€” only IntStream does.

2. When to use mapToObj
You're starting from a primitive stream (like IntStream) and you want to transform to objects 

class Solution {
    public List<List<String>> partition(String s) {
        List<String> list = IntStream.range(0, s.length())
            .mapToObj(i -> s.substring(0, i + 1))
            .filter(t -> t.equals(new StringBuilder(t).reverse().toString()))
            .collect(Collectors.toList());

        System.out.println(list);
        return null;
    }
}
*/
