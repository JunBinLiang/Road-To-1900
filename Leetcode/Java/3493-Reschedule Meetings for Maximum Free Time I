class Solution {
    public int maxFreeTime(int t, int k, int[] a, int[] b) {
        return Math.max(
            IntStream.range(0, a.length)
                .map(i -> 
                    (i == 0 || i == a.length - 1) ? 
                        (i == 0 ? a[i] : (t - b[i])) 
                        : (a[i + 1] - b[i])
                )
                .boxed()
                .max(Integer::compareTo)
                .orElse(0),
            IntStream.range(0, a.length)
                .boxed()
                .reduce(
                    new int[]{0, 0},
                    (ans, i) -> (
                        i + 1 < k 
                        ? new int[]{ans[0] + (b[i] - a[i]), ans[1]} 
                        : new int[]{
                            ans[0] + (b[i] - a[i]) - (b[i - k + 1] - a[i - k + 1]),
                            Math.max(
                                ans[1], 
                                (i == a.length - 1 ? t : a[i + 1]) - 
                                (i - k >= 0 ? b[i - k] : 0) - 
                                (ans[0] + (b[i] - a[i]))
                            )
                        }
                    ),
                    (x, y) -> x
                )[1]
        );
    }
}
