class Solution {
    public long maximumProfit(int[] a, int k) {
        int n = a.length;
        long[][][] dp = new long[a.length][k + 1][3];
        for(int i = 0; i < a.length; i++) {
            for(int j = 0; j < k + 1; j++) {
                dp[i][j][0] = dp[i][j][1] = dp[i][j][2] = -10000000000000000l;
            }
        }

        dp[0][0][0] = -a[0]; //type 1
        dp[0][0][1] = a[0]; // type 2
        dp[0][0][2] = 0; //complete

        for(int i = 1; i < n; i++) {
            dp[i][0][0] = Math.max(dp[i - 1][0][0], -a[i]);
            dp[i][0][1] = Math.max(dp[i - 1][0][1], a[i]);
            dp[i][0][2] = 0;
            for(int j = 1; j <= k; j++) {
                dp[i][j][0] = Math.max(dp[i][j][0], dp[i - 1][j][0]);
                dp[i][j][0] = Math.max(dp[i][j][0], dp[i - 1][j][2] - a[i]);

                dp[i][j][1] = Math.max(dp[i][j][1], dp[i - 1][j][1]);
                dp[i][j][1] = Math.max(dp[i][j][1], dp[i - 1][j][2] + a[i]);

                dp[i][j][2] = Math.max(dp[i][j][2], dp[i - 1][j][2]);
                dp[i][j][2] = Math.max(dp[i][j][2], dp[i - 1][j - 1][0] + a[i]);
                dp[i][j][2] = Math.max(dp[i][j][2], dp[i - 1][j - 1][1] - a[i]);
            }
        }
        
        long ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j <= k; j++) {
                ans = Math.max(ans, dp[i][j][2]);
            }
        }
        return ans;
    }
}
